#![feature(test)]
#![feature(random)]

use std::random::Random;

use riscv_decoder::{decoded_inst::InstructionDecoded, decoder::try_decode, instructions::{ARITMETIC_IMMEDIATE_MATCH, ARITMETIC_REGISTER_MATCH, ATOMIC_MATCH, AUIPC_MATCH, BRANCH_MATCH, CSR_MATCH, FENCE_MATCH, FLOAD_MATCH, FLOATING_POINT_MATCH, FMADDD_MATCH, FMSUBD_MATCH, FNMADDD_MATCH, FNMSUBD_MATCH, FSTORE_MATCH, JALR_MATCH, JAL_MATCH, LOAD_MATCH, LUI_MATCH, STORE_MATCH}};
use test::Bencher;
extern crate test;

fn random_inst() -> u32 {
	const INSTS: &[u32] = &[
		0x00b567b3,
		0x0037f793,
		0x02079e63,
		0xffc67813,
		0x01050833,
		0x03057863,
		0x00050793,
		0x0100006f,
		0x00478793,
		0x00458593,
		0x0107f863,
		0x0007a683,
		0x0005a703,
		0xfee686e3,
		0x40a78533,
		0x40a60633,
		0x00078513,
		0x00c58633,
		0x0140006f,
		0xfff54783,
		0x0005c703,
		0x00158593,
		0x00e79a63,
		0x00150513,
		0xfec596e3,
		0x00000513,
		0x00008067,
		0x40e78533,
		0x00008067,
		0xfd010113,
		0x00100793,
		0xfffff737,
		0x00f12623,
		0x02112623,
		0x00012423,
		0x00e506b3,
		0x0003e7b7,
		0x02812423,
		0x02912223,
		0x1af6fa63,
		0x01412c23,
		0x00c55a13,
		0x400a0493,
		0x01312e23,
		0x00249793,
		0x00003997,
		0xbe098993,
		0x00f987b3,
		0x0007a783,
		0x00e57433,
		0x10079a63,
		0x00005717,
		0xbcc70713,
		0x01512a23,
		0x00072a83,
		0x03212023,
		0x1c0a8263,
		0x004aa783,
		0x00005697,
		0xbac6a683,
		0x00f72023,
		0x14d78863,
		0x00c10613,
		0x00810593,
		0x00040513,
		0x000aa903,
		0x6a4000ef,
		0x10051c63,
		0x00c95713,
		0x00a71713,
		0x01f76713,
		0x00249613,
		0x00c98633,
		0x0c076793,
		0x00f62023,
		0x12040073,
		0x00002617,
		0xb6460613,
		0x003a1693,
		0x00d606b3,
		0x0006a783,
		0x14079663,
		0x000aa603,
		0x000407b7,
		0x00c6a023,
		0x004aa603,
		0x00c6a223,
		0x1007a5f3,
		0xffc007b7,
		0x00f407b3,
		0x00001637,
		0x00c78633,
		0x00040693,
		0x0007a303,
		0x0047a883,
		0x0087a803,
		0x00c7a503,
		0x0066a023,
		0x0116a223,
		0x0106a423,
		0x00a6a623,
		0x01078793,
		0x01068693,
		0xfcc79ce3,
		0x10059073,
		0x00249493,
		0x009987b3,
		0x00e7a023,
		0x12040073,
		0x0000100f,
		0x02812403,
		0x02c12083,
		0x02012903,
		0x01412a83,
		0x02412483,
		0x01c12983,
		0x01812a03,
		0x03010113,
		0x00008067,
		0x0407f713,
		0x04070e63,
		0x0807f713,
		0x08071663,
		0x00f00713,
		0x0807e793,
		0x08e59063,
		0x00249493,
		0x009984b3,
		0x00f4a023,
		0x12040073,
		0x02812403,
		0x02c12083,
		0x02412483,
		0x01c12983,
		0x01812a03,
		0x03010113,
		0x00008067,
		0x000aa703,
		0x00812783,
		0x00c75713,
		0x00a71713,
		0x00f76733,
		0xee5ff06f,
		0x0407e793,
		0xfb9ff06f,
		0x00005797,
		0xa407a823,
		0xeadff06f,
		0x00001517,
		0xa6050513,
		0x03212023,
		0x01312e23,
		0x01412c23,
		0x01512a23,
		0xc7dff0ef,
		0x00300513,
		0xcddff0ef,
		0x00001517,
		0xa8050513,
		0x03212023,
		0x01512a23,
		0xc61ff0ef,
		0x00300513,
		0xcc1ff0ef,
		0x00001517,
		0xac450513,
		0xc4dff0ef,
		0x00300513,
		0xcadff0ef,
		0x00001517,
		0xa9850513,
		0xc39ff0ef,
		0x00300513,
		0xc99ff0ef,
		0xf14027f3,
		0x16079863,
		0xf6010113,
		0x08812c23,
		0x00050413,
		0x00003517,
		0x6c850513,
		0x00c55793,
		0x00002597,
		0x6bc58593,
		0x20000637,
		0x00a79793,
		0x08112e23,
		0x0cf60613,
		0x0017e793,
		0x00c5d693,
		0x80000737,
		0x00f5a023,
		0xfec52e23,
		0x00e6e7b3,
		0x18079073,
		0x180026f3,
		0x16d79e63,
		0xfff70713,
		0x01f00793,
		0x00000297,
		0x01428293,
		0x305292f3,
		0x3b071073,
		0x3a079073,
		0x30529073,
		0x7fbfd797,
		0x7b478793,
		0x10579073,
		0x340027f3,
		0x7fc00737,
		0x00e787b3,
		0x14079073,
		0x0000b7b7,
		0x10078793,
		0x30279073,
		0x0001e7b7,
		0x60078793,
		0x30079073,
		0x30405073,
		0x7fc02717,
		0x82070713,
		0x7fc02797,
		0xa0878793,
		0x00004697,
		0x60e6ae23,
		0x00080337,
		0x00004717,
		0x60f72623,
		0x7fc008b7,
		0x03f30313,
		0x00888893,
		0x00001717,
		0x7f070713,
		0x00002e17,
		0x9e0e0e13,
		0x03100793,
		0x00000593,
		0x01f59693,
		0x0017d613,
		0x00c6e633,
		0x00f646b3,
		0x006787b3,
		0x00c79793,
		0x01170833,
		0x00569693,
		0x00f72023,
		0x0206f693,
		0x01072223,
		0x00870713,
		0x0015d593,
		0x00d667b3,
		0xfcee14e3,
		0x00010513,
		0x09000613,
		0x00000593,
		0x00002797,
		0x9807a223,
		0xdecff0ef,
		0x800007b7,
		0x00f40433,
		0x00010513,
		0x08812223,
		0xe48fd0ef,
		0x09c12083,
		0x09812403,
		0x0a010113,
		0x00008067,
		0x0db0b7b7,
		0x00080637,
		0x65278793,
		0xffc60613,
		0x00000713,
		0x80000837,
		0x40000537,
		0x02c0006f,
		0x0006a02f,
		0x01f71593,
		0x0017d693,
		0x00d5e6b3,
		0x00d7c7b3,
		0x01e79793,
		0x00a7f7b3,
		0x00175713,
		0x00e7e733,
		0x00068793,
		0x00c7f6b3,
		0x0017f593,
		0x010686b3,
		0xfc0596e3,
		0x0006a003,
		0xfc9ff06f,
		0x00000517,
		0x6e850513,
		0xf50ff0ef,
		0x00300513,
		0xfb0ff0ef,
	];

	INSTS[std::random::random::<usize>() % INSTS.len()]
}

#[bench]
fn decode_insts(b: &mut Bencher) {
	let mut insts = vec![];
	(0..1_000).for_each(|_| insts.push(random_inst()));
	b.iter(|| (0..1_000).for_each(|_|{
		let _ = std::hint::black_box(try_decode(insts[std::random::random::<usize>() % insts.len()]));
	}));
}

fn main() {
	// This is just a placeholder main function to allow the code to compile.
	// The actual tests are run using the `cargo test` command.
	unimplemented!("Run `cargo test` to execute the tests.");
}
