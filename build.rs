use std::env;
use std::fs::File;
use std::io::{BufWriter, Write};
use std::path::Path;

fn main() {
    // rerun if the build script changes
    println!("cargo:rerun-if-changed=build.rs");

    println!("Running Build Script!");

    let path = Path::new(&env::var("OUT_DIR").unwrap()).join("codegen.rs");

    // rerun if file in path variable has changed
    println!("cargo:rerun-if-changed={}", path.to_str().unwrap());

    let mut file = BufWriter::new(File::create(&path).unwrap());

    let mut map = phf_codegen::Map::<u32>::new();

    const CSR_ARG_NAMES: [(u32, &'static str); 288] = [
        (0x0280, "\"bsatp\""),
        (0x0242, "\"bscause\""),
        (0x0241, "\"bsepc\""),
        (0x0204, "\"bsie\""),
        (0x0244, "\"bsip\""),
        (0x0240, "\"bsscratch\""),
        (0x0200, "\"bsstatus\""),
        (0x0243, "\"bstval\""),
        (0x0205, "\"bstvec\""),
        (0x0c00, "\"cycle\""),
        (0x0c80, "\"cycleh\""),
        (0x07b0, "\"dcsr\""),
        (0x07b1, "\"dpc\""),
        (0x07b2, "\"dscratch\""),
        (0x0003, "\"fcsr\""),
        (0x0001, "\"fflags\""),
        (0x0002, "\"frm\""),
        (0x06a8, "\"hcontext\""),
        (0x0606, "\"hcounteren\""),
        (0x0602, "\"hedeleg\""),
        (0x060a, "\"henvcfg\""),
        (0x061a, "\"henvcfgh\""),
        (0x0680, "\"hgatp\""),
        (0x0607, "\"hgeie\""),
        (0x0e12, "\"hgeip\""),
        (0x0603, "\"hideleg\""),
        (0x0604, "\"hie\""),
        (0x0644, "\"hip\""),
        (0x0c0a, "\"hpmcounter10\""),
        (0x0c8a, "\"hpmcounter10h\""),
        (0x0c0b, "\"hpmcounter11\""),
        (0x0c8b, "\"hpmcounter11h\""),
        (0x0c0c, "\"hpmcounter12\""),
        (0x0c8c, "\"hpmcounter12h\""),
        (0x0c0d, "\"hpmcounter13\""),
        (0x0c8d, "\"hpmcounter13h\""),
        (0x0c0e, "\"hpmcounter14\""),
        (0x0c8e, "\"hpmcounter14h\""),
        (0x0c0f, "\"hpmcounter15\""),
        (0x0c8f, "\"hpmcounter15h\""),
        (0x0c10, "\"hpmcounter16\""),
        (0x0c90, "\"hpmcounter16h\""),
        (0x0c11, "\"hpmcounter17\""),
        (0x0c91, "\"hpmcounter17h\""),
        (0x0c12, "\"hpmcounter18\""),
        (0x0c92, "\"hpmcounter18h\""),
        (0x0c13, "\"hpmcounter19\""),
        (0x0c93, "\"hpmcounter19h\""),
        (0x0c14, "\"hpmcounter20\""),
        (0x0c94, "\"hpmcounter20h\""),
        (0x0c15, "\"hpmcounter21\""),
        (0x0c95, "\"hpmcounter21h\""),
        (0x0c16, "\"hpmcounter22\""),
        (0x0c96, "\"hpmcounter22h\""),
        (0x0c17, "\"hpmcounter23\""),
        (0x0c97, "\"hpmcounter23h\""),
        (0x0c18, "\"hpmcounter24\""),
        (0x0c98, "\"hpmcounter24h\""),
        (0x0c19, "\"hpmcounter25\""),
        (0x0c99, "\"hpmcounter25h\""),
        (0x0c1a, "\"hpmcounter26\""),
        (0x0c9a, "\"hpmcounter26h\""),
        (0x0c1b, "\"hpmcounter27\""),
        (0x0c9b, "\"hpmcounter27h\""),
        (0x0c1c, "\"hpmcounter28\""),
        (0x0c9c, "\"hpmcounter28h\""),
        (0x0c1d, "\"hpmcounter29\""),
        (0x0c9d, "\"hpmcounter29h\""),
        (0x0c03, "\"hpmcounter3\""),
        (0x0c1e, "\"hpmcounter30\""),
        (0x0c9e, "\"hpmcounter30h\""),
        (0x0c1f, "\"hpmcounter31\""),
        (0x0c9f, "\"hpmcounter31h\""),
        (0x0c83, "\"hpmcounter3h\""),
        (0x0c04, "\"hpmcounter4\""),
        (0x0c84, "\"hpmcounter4h\""),
        (0x0c05, "\"hpmcounter5\""),
        (0x0c85, "\"hpmcounter5h\""),
        (0x0c06, "\"hpmcounter6\""),
        (0x0c86, "\"hpmcounter6h\""),
        (0x0c07, "\"hpmcounter7\""),
        (0x0c87, "\"hpmcounter7h\""),
        (0x0c08, "\"hpmcounter8\""),
        (0x0c88, "\"hpmcounter8h\""),
        (0x0c09, "\"hpmcounter9\""),
        (0x0c89, "\"hpmcounter9h\""),
        (0x0600, "\"hstatus\""),
        (0x0605, "\"htimedelta\""),
        (0x0615, "\"htimedeltah\""),
        (0x064a, "\"htinst\""),
        (0x0643, "\"htval\""),
        (0x0645, "\"hvip\""),
        (0x0c02, "\"instret\""),
        (0x0c82, "\"instreth\""),
        (0x0f12, "\"marchid\""),
        (0x0380, "\"mbase\""),
        (0x0381, "\"mbound\""),
        (0x0342, "\"mcause\""),
        (0x0f15, "\"mconfigptr\""),
        (0x07a8, "\"mcontext\""),
        (0x0306, "\"mcounteren\""),
        (0x0320, "\"mcountinhibit\""),
        (0x0b00, "\"mcycle\""),
        (0x0b80, "\"mcycleh\""),
        (0x0384, "\"mdbase\""),
        (0x0385, "\"mdbound\""),
        (0x0302, "\"medeleg\""),
        (0x030a, "\"menvcfg\""),
        (0x031a, "\"menvcfgh\""),
        (0x0341, "\"mepc\""),
        (0x0f14, "\"mhartid\""),
        (0x0b0a, "\"mhpmcounter10\""),
        (0x0b8a, "\"mhpmcounter10h\""),
        (0x0b0b, "\"mhpmcounter11\""),
        (0x0b8b, "\"mhpmcounter11h\""),
        (0x0b0c, "\"mhpmcounter12\""),
        (0x0b8c, "\"mhpmcounter12h\""),
        (0x0b0d, "\"mhpmcounter13\""),
        (0x0b8d, "\"mhpmcounter13h\""),
        (0x0b0e, "\"mhpmcounter14\""),
        (0x0b8e, "\"mhpmcounter14h\""),
        (0x0b0f, "\"mhpmcounter15\""),
        (0x0b8f, "\"mhpmcounter15h\""),
        (0x0b10, "\"mhpmcounter16\""),
        (0x0b90, "\"mhpmcounter16h\""),
        (0x0b11, "\"mhpmcounter17\""),
        (0x0b91, "\"mhpmcounter17h\""),
        (0x0b12, "\"mhpmcounter18\""),
        (0x0b92, "\"mhpmcounter18h\""),
        (0x0b13, "\"mhpmcounter19\""),
        (0x0b93, "\"mhpmcounter19h\""),
        (0x0b14, "\"mhpmcounter20\""),
        (0x0b94, "\"mhpmcounter20h\""),
        (0x0b15, "\"mhpmcounter21\""),
        (0x0b95, "\"mhpmcounter21h\""),
        (0x0b16, "\"mhpmcounter22\""),
        (0x0b96, "\"mhpmcounter22h\""),
        (0x0b17, "\"mhpmcounter23\""),
        (0x0b97, "\"mhpmcounter23h\""),
        (0x0b18, "\"mhpmcounter24\""),
        (0x0b98, "\"mhpmcounter24h\""),
        (0x0b19, "\"mhpmcounter25\""),
        (0x0b99, "\"mhpmcounter25h\""),
        (0x0b1a, "\"mhpmcounter26\""),
        (0x0b9a, "\"mhpmcounter26h\""),
        (0x0b1b, "\"mhpmcounter27\""),
        (0x0b9b, "\"mhpmcounter27h\""),
        (0x0b1c, "\"mhpmcounter28\""),
        (0x0b9c, "\"mhpmcounter28h\""),
        (0x0b1d, "\"mhpmcounter29\""),
        (0x0b9d, "\"mhpmcounter29h\""),
        (0x0b03, "\"mhpmcounter3\""),
        (0x0b1e, "\"mhpmcounter30\""),
        (0x0b9e, "\"mhpmcounter30h\""),
        (0x0b1f, "\"mhpmcounter31\""),
        (0x0b9f, "\"mhpmcounter31h\""),
        (0x0b83, "\"mhpmcounter3h\""),
        (0x0b04, "\"mhpmcounter4\""),
        (0x0b84, "\"mhpmcounter4h\""),
        (0x0b05, "\"mhpmcounter5\""),
        (0x0b85, "\"mhpmcounter5h\""),
        (0x0b06, "\"mhpmcounter6\""),
        (0x0b86, "\"mhpmcounter6h\""),
        (0x0b07, "\"mhpmcounter7\""),
        (0x0b87, "\"mhpmcounter7h\""),
        (0x0b08, "\"mhpmcounter8\""),
        (0x0b88, "\"mhpmcounter8h\""),
        (0x0b09, "\"mhpmcounter9\""),
        (0x0b89, "\"mhpmcounter9h\""),
        (0x032a, "\"mhpmevent10\""),
        (0x032b, "\"mhpmevent11\""),
        (0x032c, "\"mhpmevent12\""),
        (0x032d, "\"mhpmevent13\""),
        (0x032e, "\"mhpmevent14\""),
        (0x032f, "\"mhpmevent15\""),
        (0x0330, "\"mhpmevent16\""),
        (0x0331, "\"mhpmevent17\""),
        (0x0332, "\"mhpmevent18\""),
        (0x0333, "\"mhpmevent19\""),
        (0x0334, "\"mhpmevent20\""),
        (0x0335, "\"mhpmevent21\""),
        (0x0336, "\"mhpmevent22\""),
        (0x0337, "\"mhpmevent23\""),
        (0x0338, "\"mhpmevent24\""),
        (0x0339, "\"mhpmevent25\""),
        (0x033a, "\"mhpmevent26\""),
        (0x033b, "\"mhpmevent27\""),
        (0x033c, "\"mhpmevent28\""),
        (0x033d, "\"mhpmevent29\""),
        (0x0323, "\"mhpmevent3\""),
        (0x033e, "\"mhpmevent30\""),
        (0x033f, "\"mhpmevent31\""),
        (0x0324, "\"mhpmevent4\""),
        (0x0325, "\"mhpmevent5\""),
        (0x0326, "\"mhpmevent6\""),
        (0x0327, "\"mhpmevent7\""),
        (0x0328, "\"mhpmevent8\""),
        (0x0329, "\"mhpmevent9\""),
        (0x0382, "\"mibase\""),
        (0x0383, "\"mibound\""),
        (0x0303, "\"mideleg\""),
        (0x0304, "\"mie\""),
        (0x0f13, "\"mimpid\""),
        (0x0b02, "\"minstret\""),
        (0x0b82, "\"minstreth\""),
        (0x0346, "\"mintstatus\""),
        (0x0344, "\"mip\""),
        (0x0301, "\"misa\""),
        (0x0345, "\"mnxti\""),
        (0x0340, "\"mscratch\""),
        (0x0348, "\"mscratchcsw\""),
        (0x0349, "\"mscratchcswl\""),
        (0x0747, "\"mseccfg\""),
        (0x0757, "\"mseccfgh\""),
        (0x0300, "\"mstatus\""),
        (0x0310, "\"mstatush\""),
        // (MMI, "\"mtime\""),
        // (MMI, "\"mtimecmp\""),
        (0x034a, "\"mtinst\""),
        (0x0343, "\"mtval\""),
        (0x034b, "\"mtval2\""),
        (0x0305, "\"mtvec\""),
        (0x0307, "\"mtvt\""),
        (0x0f11, "\"mvendorid\""),
        (0x03b0, "\"pmpaddr0\""),
        (0x03b1, "\"pmpaddr1\""),
        (0x03ba, "\"pmpaddr10\""),
        (0x03bb, "\"pmpaddr11\""),
        (0x03bc, "\"pmpaddr12\""),
        (0x03bd, "\"pmpaddr13\""),
        (0x03be, "\"pmpaddr14\""),
        (0x03bf, "\"pmpaddr15\""),
        (0x03b2, "\"pmpaddr2\""),
        (0x03b3, "\"pmpaddr3\""),
        (0x03b4, "\"pmpaddr4\""),
        (0x03b5, "\"pmpaddr5\""),
        (0x03b6, "\"pmpaddr6\""),
        (0x03ef, "\"pmpaddr63\""),
        (0x03b7, "\"pmpaddr7\""),
        (0x03b8, "\"pmpaddr8\""),
        (0x03b9, "\"pmpaddr9\""),
        (0x03a0, "\"pmpcfg0\""),
        (0x03a1, "\"pmpcfg1\""),
        (0x03ae, "\"pmpcfg14\""),
        (0x03af, "\"pmpcfg15\""),
        (0x03a2, "\"pmpcfg2\""),
        (0x03a3, "\"pmpcfg3\""),
        (0x0180, "\"satp\""),
        (0x0142, "\"scause\""),
        (0x05a8, "\"scontext\""),
        (0x0106, "\"scounteren\""),
        (0x0102, "\"sedeleg\""),
        (0x010a, "\"senvcfg\""),
        (0x0141, "\"sepc\""),
        (0x0103, "\"sideleg\""),
        (0x0104, "\"sie\""),
        (0x0146, "\"sintstatus\""),
        (0x0144, "\"sip\""),
        (0x0145, "\"snxti\""),
        (0x0140, "\"sscratch\""),
        (0x0148, "\"sscratchcsw\""),
        (0x0149, "\"sscratchcswl\""),
        (0x0100, "\"sstatus\""),
        (0x0143, "\"stval\""),
        (0x0105, "\"stvec\""),
        (0x0107, "\"stvt\""),
        (0x07a1, "\"tdata1\""),
        (0x07a2, "\"tdata2\""),
        (0x07a3, "\"tdata3\""),
        (0x0c01, "\"time\""),
        (0x0c81, "\"timeh\""),
        (0x07a0, "\"tselect\""),
        (0x0042, "\"ucause\""),
        (0x0041, "\"uepc\""),
        (0x0004, "\"uie\""),
        (0x0046, "\"uintstatus\""),
        (0x0044, "\"uip\""),
        (0x0045, "\"unxti\""),
        (0x0040, "\"uscratch\""),
        (0x0048, "\"uscratchcsw\""),
        (0x0049, "\"uscratchcswl\""),
        (0x0000, "\"ustatus\""),
        (0x0043, "\"utval\""),
        (0x0005, "\"utvec\""),
        (0x0007, "\"utvt\""),
        (0x0c20, "\"vl\""),
        // (0x0280, "\"vsatp\""),
        // (0x0242, "\"vscause\""),
        // (0x0241, "\"vsepc\""),
        // (0x0204, "\"vsie\""),
        // (0x0244, "\"vsip\""),
        // (0x0240, "\"vsscratch\""),
        // (0x0200, "\"vsstatus\""),
        (0x0008, "\"vstart\""),
        // (0x0243, "\'vstval\""),
        // (0x0205, "\'vstvec\""),
        (0x0c21, "\"vtype\""),
        (0x000a, "\"vxrm\""),
        (0x0009, "\"vxsat\""),
    ];

    for (k, v) in CSR_ARG_NAMES {
        map.entry(k, v);
    }

    writeln!(&mut file, "static CSRS: phf::Map<u32, &'static str> = {};", map.build()).unwrap();
}
